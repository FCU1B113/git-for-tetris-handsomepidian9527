#include <stdio.h>
#include <stdbool.h>
#define CANVAS_WIDTH 10
#define CANVAS_HEIGHT 20
typedef enum
{
    EMPTY = -1,
    I,
    J,
    L,
    O,
    S,
    T,
    Z
} Shapeid;
typedef enum
{
    RED = 41,
    GREEN,
    YELLOW,
    BLUE,
    PURPLE,
    CYAN,
    WHITE,
    BLACK = 0,

} Color;

typedef struct
{
    Shapeid shape;
    Color color;
    int size;
    char rotates[4][4][4];

} Shape;
typedef struct
{
    Color color;
    Shapeid shape;
    bool current;

} Block;
typedef struct Tetris
{
    int x;
    int y;
    int score;
    int rotate;
    int falltime;
    Shapeid queue[4];

} State;

Shape shape[7] = {

    {// i
     .shape = I,
     .color = CYAN,
     .size = 4,
     .rotates = {
         {{0, 1, 0, 0},
          {0, 1, 0, 0},
          {0, 1, 0, 0},
          {0, 1, 0, 0}},
         {{0, 0, 0, 0},
          {1, 1, 1, 1},
          {0, 0, 0, 0},
          {0, 0, 0, 0}},
         {{0, 0, 0, 0},
          {0, 0, 0, 0},
          {1, 1, 1, 1},
          {0, 0, 0, 0}},
         {{0, 0, 1, 0},
          {0, 0, 1, 0},
          {0, 0, 1, 0},
          {0, 0, 1, 0}}}},
    {.shape = S, .color = GREEN, .size = 4, .rotates = {{{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 1, 1, 0}, {1, 1, 0, 0}}, {{1, 0, 0, 0}, {1, 1, 0, 0}, {0, 1, 0, 0}, {0, 0, 0, 0}}, {{0, 0, 0, 0}, {0, 0, 1, 0}, {0, 0, 1, 1}, {0, 0, 0, 1}}, {{0, 1, 1, 0}, {1, 1, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}}},
    {.shape = J, .color = BLUE, .size = 4, .rotates = {{{0, 1, 0, 0}, {0, 1, 0, 0}, {1, 1, 0, 0}, {0, 0, 0, 0}}, {{0, 1, 0, 0}, {0, 1, 1, 1}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{0, 0, 0, 0}, {0, 1, 1, 0}, {0, 1, 0, 0}, {0, 1, 0, 0}}, {{0, 0, 0, 0}, {0, 0, 0, 0}, {1, 1, 1, 0}, {0, 0, 1, 0}}}},
    {.shape = O, .color = WHITE, .size = 4, .rotates = {
                                                {{0, 0, 0, 0}, {0, 1, 1, 0}, {0, 1, 1, 0}, {0, 0, 0, 0}},
                                            }},
    {.shape = L, .color = YELLOW, .size = 4, .rotates = {{{0, 1, 0, 0}, {0, 1, 0, 0}, {0, 1, 1, 0}, {0, 0, 0, 0}}, {{0, 0, 0, 0}, {0, 1, 1, 1}, {0, 1, 0, 0}, {0, 0, 0, 0}}, {{0, 0, 0, 0}, {1, 1, 0, 0}, {0, 1, 0, 0}, {0, 1, 0, 0}}, {{0, 0, 0, 0}, {0, 0, 1, 0}, {1, 1, 1, 0}, {0, 0, 0, 0}}}

    },
    {.shape = T, .color = PURPLE, .size = 4, .rotates = {{{0, 0, 0, 0}, {0, 1, 0, 0}, {1, 1, 1, 0}, {0, 0, 0, 0}}, {{0, 1, 0, 0}, {0, 1, 1, 0}, {0, 1, 0, 0}, {0, 0, 0, 0}}, {{0, 0, 0, 0}, {1, 1, 1, 0}, {0, 1, 0, 0}, {0, 0, 0, 0}}, {{0, 0, 0, 0}, {0, 0, 1, 0}, {0, 1, 1, 0}, {0, 0, 1, 0}}}}

};
void setblock(Block *block, Color color, Shapeid shape, bool currnet)
{
    block->color = color;
    block->shape = shape;
    block->shape = shape;
    block->current = currnet;
}
void resetblock(Block *block)
{
    block->color = BLACK;
    block->shape = EMPTY;
    block->current = false;
}
void printCanvas(Block canvas[CANVAS_HEIGHT][CANVAS_WIDTH], State *state)
{
    printf("\033[0;0H\n");
    for (int i = 0; i < CANVAS_HEIGHT; i++)
    {
        printf("|");
        for (int j = 0; j < CANVAS_WIDTH; j++)
        {
            printf("\033[%dm\u3000", canvas[i][j].color);
        }
        printf("\033[0m|\n");
    }
    return;
}

int main()
{
    Color cur;
    for (int i = 0; i < 1; i++)
    {
        for (int r = 0; r < 4; r++)
        {
            for (int s = 0; s < shape[i].size; s++)
            {
                for (int t = 0; t < shape[i].size; t++)
                {
                    if (shape[i].rotates[r][s][t] == 0)
                    {
                        cur = WHITE;
                    }
                    else
                    {
                        cur = shape[i].color;
                    }
                    printf("\033[%dm \033[0m", cur);
                }
                printf('\n');
            }
            printf('\n');
        }
    }
    return 0;
}